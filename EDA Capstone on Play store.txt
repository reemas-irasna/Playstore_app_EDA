# IMPORTING REQURE LIBRARIES
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

#READ CSV FILE
df1 = pd.read_csv('/content/drive/MyDrive/Play Store Data.csv')
#useless Data
df1 = df1.drop(10472).reset_index(drop = True)
df1 = df1.drop(9148).reset_index(drop = True)

#TOP 5 ROWS OF DATASET
df1.head()

# LAST 5 ROWS OF DATASET
df1.tail()

# NO OF ROWS AND COLUMN IN DATASET
df1.shape

# USE INFO FUNCTION, TO KNOW THE NULL VALUES PARENT IN OUR DATASET AND DATA TYPE OF COLUMNS
df1.info()

#Data Cleaning
#change Review to int type
def get_int(elem):
    return(int(elem))

df1['Reviews'] =df1.apply(lambda x: get_int(x['Reviews']), axis = 1)

#removing outliers of size
def get_size(elem):
  if elem[-1] != 'M':
    return('1M')
  else:
    return(elem)

df1['Size'] =df1.apply(lambda x: get_size(x['Size']), axis = 1)

#making size as float
def get_size_float(elem):
  return(eval(elem[0:-1]))


df1['Size_in_mb'] =df1.apply(lambda x: get_size_float(x['Size']), axis = 1)

#change statyoe of install to 
def get_install(elem):
  if elem[-1] == '+':
    elem =elem[0:-1]
    y= elem.split(',')
    y = ''.join(y)
    return(eval(y))
  else:
    return(eval(elem))

df1['Installs'] = df1.apply(lambda x: get_install(x['Installs']), axis = 1)

#FILL NULL VALUE IN RATING
df1['Rating'].fillna(0.0, inplace = True)

#convert price into float
def get_Price(elem):
  if elem[0] == '$':
    elem =elem[1:]
    return(eval(elem))
  else:
    return(eval(elem))

df1['dollar_price'] = df1.apply(lambda x: get_Price(x['Price']), axis = 1)

#fill null value in current ver
df1['Current Ver'].fillna(0.0, inplace = True)


#fill null values and convert to float in Android Ver
df1['Android Ver'].fillna('4.0', inplace = True)
def get_ver(elem):
  if elem != 'Varies with device':
    elem =elem[0:3]
    return(eval(elem))
  else:
    return(eval('4.0'))

df1['min_Android_Ver'] = df1.apply(lambda x: get_ver(x['Android Ver']), axis = 1)

#extracted year from Last Updated
def get_year(elem):
  elem =elem[-4:]
  return(eval(elem))

df1['year'] = df1.apply(lambda x: get_year(x['Last Updated']), axis = 1)

#Create new Data frame to store all the clean and required values for EDA
data_needed = ['App', 'Category', 'Rating', 'Reviews', 'Installs', 'Type', 'year', 
       'Price', 'Content Rating', 'Size_in_mb', 'dollar_price', 'min_Android_Ver']
df_new = df1[data_needed]

df_new.head()

#Q1 Best top 3 Category app less in size for both type

top_category_app = df_new.groupby(['Category', 'Type']).agg({'Size_in_mb' : 'mean'}).sort_values(by = 'Category').reset_index()
top_category_app.head()

fig = px.histogram(top_category_app, x="Category", y="Size_in_mb",
             color='Type', barmode='group',
             height=700,title='Category vs Mean Size')
fig.show()

#Q2 Percentage of free and paid app

free, paid = 0, 0
for elem in df_new.Type:
  if elem == 'Free':
    free = free + 1
  else:
    paid = paid +1

print(free, paid)

free_percent = round((free / (free + paid)) * 100, 2)
paid_percent = round((paid / (free + paid)) * 100, 2)

f= 'free = ' + str(free_percent) + '%'
p = 'paid = ' + str(paid_percent) + '%'
label = [f, p]
x = np.array([free, paid])
plt.pie(x,  labels = label)

df_new['Type'].value_counts().plot.pie(figsize = (15,10), autopct='%1.1f%%',title='Percentage of Free and Paid App')
plt.legend()

# Q3 correlation between year and minimum android version required 
df_android=df_new.groupby(['year']).agg({'min_Android_Ver':'median'}).reset_index()
print(df_android.head())
sns.lmplot(x='year', y='min_Android_Ver',data=df_android,size=8).set(title='Correlation between Year and Android version')

fig = px.scatter(df_android, x="year", y="min_Android_Ver", trendline="ols",title='Year vs Minimum Android Version')
fig.show()


# Q4 Distribution of App by Category
df_distri=df_new.groupby(['Category']).agg({'App':'count'}).reset_index()
df_distri.head()

fig=px.bar(df_distri,x='Category', y='App',title='Distribution of App by Category',text_auto='.2s')
fig.show()
fig1 = px.pie(df_distri, values='App', names='Category', title='Distribution of App by Category')
fig1.show()

#Q5 Most review apps category wise
df_most=df_new.groupby(['Category']).agg({'Reviews':'max'}).reset_index()

fig=px.bar(df_most,x='Reviews', y='Category',title='Category vs Review',text_auto='.2s',height=800)
fig.show()

# Q6 Number of apps present in play store category wise(free & paid)
df_num = df_new.groupby(['Category','Type']).agg({'App' : 'count'}).sort_values(by = 'Category').reset_index()

fig = px.line(df_num, x='Category', y='App', color='Type', symbol="Type")
fig.show()

fig = px.bar(df_num, x="App", y="Category", color="Type", title="Number of apps present in play store category wise(free & paid)", height=800,text_auto='.2s')
fig.show()

#Q7 Pearson Correlation – price, install, size, reviews, rating

corr_variable = ['dollar_price', 'Installs', 'Size_in_mb', 'Reviews', 'Rating']
df_pearson_corr = df_new[corr_variable]
df_pearson_corr = df_pearson_corr.corr()

plt.figure(figsize=(15,7))
sns.heatmap(df_pearson_corr,fmt='.2f',linewidths=0.1,annot=True).set(title='Pearson Correlation – price, install, size, reviews, rating')

#Q8	Distribution of App by Content Rating
df_content_rat=df_new.groupby(['Content Rating']).agg({'App':'count'}).reset_index()
df_content_rat.head()
fig=px.bar(df_content_rat,x='Content Rating', y='App',title='Distribution of App by Content Rating',text_auto='.2s')
fig.show()

fig = px.bar(df_content_rat, x="Content Rating", y="App", color="Content Rating", text="Content Rating", text_auto='.2s',title='Distribution of App by Content Rating')
fig.show()

#Q9 rating distribution of apps
plt.figure(figsize=(15,7))
rating_distribution = sns.countplot(x="Rating" , data=df_new, palette = "Set1")
rating_distribution.set_xticklabels(rating_distribution.get_xticklabels(), rotation=90, ha="right")
plt.title("Rating distribution of Apps")

#Q10 Variation of App with respect to Year
df_year=df_new.groupby(['year']).agg({'App':'count'}).reset_index()
fig = px.bar(df_year, x="year", y="App", color="year", text="year", text_auto='.2s',title='Apps vs Year')
fig.show()

#Q11 top five Revenue App
def get_revenue(a,b):
  return a*b
df_new['Revenue'] = df_new.apply(lambda x: get_revenue(x['Installs'],x['dollar_price']), axis = 1)

df_revenue=df_new.groupby(['App']).agg({'Revenue':'mean'}).sort_values(by='Revenue',ascending=False).reset_index()
df_revenue[:5]

fig = px.bar(df_revenue[:5], x="App", y="Revenue", color="App", text="App", text_auto='.2s',title='Revenue of The Top Five App')
fig.show()

#Q12 Distribution of Category by install
df_install=df_new.groupby('Category')[['Installs']].sum().sort_values(by='Installs', ascending=False).reset_index()

fig = px.bar(df_install, x="Installs", y="Category",color="Category",title='Category vs Installs', height=800)
fig.show()


\\ Data Cleaning of 2nd Dataset \\

df_Review_data = pd.read_csv('/content/User Reviews.csv')
df_Review_data.tail()
df_Review_data.info()
df_Review_data.drop_duplicates( keep='first', inplace=True, ignore_index=True)   # delete Duplicates Values
df_Review_data.dropna(inplace=True)  # Removes All null values

#Q13 Percentage of Positive, negative and neutral 
df_Review_data['Sentiment'].value_counts().plot.pie(figsize = (15,10), autopct='%1.1f%%',title='Percentage of Positive, negative, neutral')
plt.legend()

df_Review_data['Sentiment'].value_counts().plot.bar(figsize = (15,10),title='Percentage of Positive, negative, neutral')
plt.legend()

df_sentiment=df_Review_data['Sentiment'].value_counts().reset_index()
df_sentiment.head()

fig1 = px.bar(df_sentiment, x='index',y='Sentiment',color='index', title='Distribution of App by Category')
fig1.show()

# Q14 Sentiment Polarity vs Sentiment Subjectivity
fig = px.scatter(df_Review_data, x="Sentiment_Polarity", y="Sentiment_Subjectivity", color='Sentiment',title='Polarity vs Subjectivity')
fig.show()
